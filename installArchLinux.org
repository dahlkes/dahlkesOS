#+TITLE: DahlkesOS
#+DESCRIPTION: An installtion script to install my flavour of ArchLinux.
#+AUTHOR: Stefan Dahlke
#+PROPERTY: header-args :tangle ./scripts/installArch
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about][About]]
- [[#shebang-and-comments][Shebang and comments]]
- [[#create-dahlkesos-iso][Create DahlkesOS ISO]]
  - [[#using-arch-based-linux][Using arch based linux]]
  - [[#using-other-os][Using other OS]]
- [[#choose-installation-type][Choose Installation type]]
- [[#verify-boot-menu][Verify boot menu]]
- [[#setup-disk][Setup disk]]
  - [[#partition-the-disks][Partition the disks]]
  - [[#format-the-partitions][Format the partitions]]
  - [[#mount-the-partitions][Mount the partitions]]
- [[#install-essential-packags][Install essential packags]]
- [[#configure-system][Configure system]]
  - [[#configure-script-after-chroot][Configure script after chroot]]

* About
* Shebang and comments
#+BEGIN_SRC bash :shebang "#!/usr/bin/env bash"
# ____        _     _ _              ___  ____
#|  _ \  __ _| |__ | | | _____  ___ / _ \/ ___|     Stefan Dahlke
#| | | |/ _` | '_ \| | |/ / _ \/ __| | | \___ \     https://www.github.com/dahlkes
#| |_| | (_| | | | | |   <  __/\__ \ |_| |___) |
#|____/ \__,_|_| |_|_|_|\_\___||___/\___/|____/
#
# NAME: DahlkesOS
# DESC: A installation script for my personal ArchLinux setup.
# WARNING: Run this script at your own risk.
#+END_SRC
#+BEGIN_SRC bash :shebang "#!/usr/bin/env bash" :tangle ./scripts/buildCustomIso
# ____        _     _ _              ___  ____
#|  _ \  __ _| |__ | | | _____  ___ / _ \/ ___|     Stefan Dahlke
#| | | |/ _` | '_ \| | |/ / _ \/ __| | | \___ \     https://www.github.com/dahlkes
#| |_| | (_| | | | | |   <  __/\__ \ |_| |___) |
#|____/ \__,_|_| |_|_|_|\_\___||___/\___/|____/
#
# NAME: DahlkesOS
# DESC: A installation script for my personal ArchLinux setup.
# WARNING: Run this script at your own risk.
#+END_SRC
#+BEGIN_SRC bash :shebang "#!/usr/bin/env bash" :tangle ./scripts/configSystem
# ____        _     _ _              ___  ____
#|  _ \  __ _| |__ | | | _____  ___ / _ \/ ___|     Stefan Dahlke
#| | | |/ _` | '_ \| | |/ / _ \/ __| | | \___ \     https://www.github.com/dahlkes
#| |_| | (_| | | | | |   <  __/\__ \ |_| |___) |
#|____/ \__,_|_| |_|_|_|\_\___||___/\___/|____/
#
# NAME: DahlkesOS
# DESC: A installation script for my personal ArchLinux setup.
# WARNING: Run this script at your own risk.
#+END_SRC

* Create DahlkesOS ISO
** Using arch based linux
Run this script on an Arch based distro to create an ArchLinux iso with the needed installation script.
#+BEGIN_SRC bash :tangle ./scripts/buildCustomIso
mkdir archlive
cp -r /usr/share/archiso/configs/releng ./archlive
mv ./archlive/releng ./archlive/dahlkesOS
cp installArch ./archlive/dahlkesOS/airootfs/root/dahlkesOS
mkdir work
sudo mkarchiso -v -w ./work ./archlive/dahlkesOS
rm -r work
rm -r archlive
#+END_SRC
** Using other OS
Use the online iso builder found under:
https://colab.research.google.com/github/tallero/archiso-profiles/

- TODO: get this repo running with the specific profile. (Maybe working with branching)



* Choose Installation type
Choose if you want to make a full installation of the system or reinstall the system on a machine with an existing user partition.
#+BEGIN_SRC bash
echo "Welcome to install DahlkesOS a flavour of my Arch Linux setup."
read -p "Do you want to reinstall the system and use the existing user partition? (y/n): " answer

answer="${answer,,}"

reinstall=false

if [[ "$answer" == "yes" || "$answer" == "y" ]]; then
    reinstall=true
fi
#+END_SRC
* Verify boot menu
Check if UEFI is used. Set variables to configure the correct boot system later.
#+BEGIN_SRC bash
if [ -e /sys/firmware/efi/efivars ]; then
    is_uefi=true
else
    is_uefi=false
fi
#+END_SRC
* Setup disk
** Partition the disks
Check which disks are availabile in the system and choose the device.
#+BEGIN_SRC bash
fdisk -l

read -p "Which device to you want to partitionate? (input the whole device path /dev/sda) " device

if [ ! -e "$device"]; then
    echo "Device $device does not exist."
    exit 1
fi

cfdisk $device
#+END_SRC
** Format the partitions
Format the several partitions with the correct file system.

#+BEGIN_SRC bash
choose_partition() {
    local type = "$1"

    lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT
    read -p "Choose the partition for the $type partiotion: " partition

    if [ ! -e "/dev/$partition" ]; then
        echo "Partition $partition does not exist."
        exit 1
    fi


}

lsblk

read -p "Choose swap partition: " swap_partition
read -p "Choose boot partition: " boot_partition
read -p "Choose root partition: " root_partition
read -p "Chhose user partttion: " user_partition

#swap_partition=$(choose_partition("swap"))
#boot_partition=$(choose_partition("boot"))
#root_partition=$(choose_partition("root"))
#user_partition=$(user_partition("user"))
#+END_SRC
Root partition:
#+BEGIN_SRC bash
mkfs.ext4 /dev/$root_partition
#+END_SRC

UEFI partition:
#+BEGIN_SRC bash
if $is_uefi == true; then
   mkfs.fat -F32 /dev/$boot_partition
fi
#+END_SRC

Swap Partition:
#+BEGIN_SRC bash
mkswap /dev/$swap_partition
swapon /dev/$swap_partition
#+END_SRC

User Partition:
#+BEGIN_SRC bash
if $reinstall == FALSE; then
   mkfs.ext4 /dev/$user_partition
fi
#+END_SRC
** Mount the partitions
Mount root and uefi disk to specific mount points.
#+begin_src bash
mount --mkdir /dev/$root_partition /mnt
mount --mkdir /dev/$boot_partition /mnt/efi
mount --mkdir /dev/$user_partition /mnt/home
#+end_src
* Install essential packags
Install the essential arch packages to the root fs.
#+begin_src bash
pacstrap -K /mnt - < pkglist.txt
#+end_src
* Configure system
#+begin_src bash
genfstab -U /mnt >> /mnt/etc/fstab
cp configSystem /mnt/root
arch-chroot /mnt /bin/bash -c "bash /root/configSystem"
rm /mnt/root/configSystem
umount -R /mnt
reboot
#+end_src
** Configure script after chroot
System configuration
#+BEGIN_SRC bash :tangle ./scripts/configSystem
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
hwclock --systohc
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
read -p "What is the name of the system: " pc_name
echo $pc_name >> /etc/hostname
echo "127.0.0.1\tlocalhost" >> /etc/hosts
echo "::1\t\tlocalhost" >> /etc/hosts
echo "127.0.1.1\t$pc_name.localdomain $pc_name" >> /etc/hosts
systemctl enable NetworkManager
echo "The root password will now be set"
passwd
#pacman -S grub efibootmgr
grub-install --target=x86_64-efi --bootloader=GRUB --efi-directory=/efi --removable
grub-mkconfig -o /boot/grub/grub.cfg

# USER setup
useradd -m -G wheel -s /bin/zsh stefan
mount /dev/$
passwd stefan

line_number=$(grep -n "# %wheel ALL=(ALL:ALL) ALL" /etc/sudoers | cut -d ':' -f 1)

if [ ! -z "$line_number" ]; then
    sed -i "${line_number}s/^# //" /etc/sudoers
fi

read -p "I am ready." dummy
exit
#+end_src
